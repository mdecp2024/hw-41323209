<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<span> </span><a class="Link--inTextBlock" href="https://mdecp2024.github.io/hw-41323209/">https://mdecp2024.github.io/hw-41323209/</a></p>
<p>個人網站:<a href="https://github.com/mdecp2024/hw-41323209">https://github.com/mdecp2024/hw-41323209</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW11</h2>
<p><a href="https://youtu.be/vdiXybusZvo">https://youtu.be/vdiXybusZvo</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 圓心座標 (5, 5)，半徑 4
center_x = 5
center_y = 5
radius = 4
size = 10 # 10x10 的字形區域

# 遍歷每個位置，判斷是否在圓內
for y in range(size):
    for x in range(size):
        # 計算點 (x, y) 距離圓心的距離
        distance = (x - center_x) ** 2 + (y - center_y) ** 2
        # 若距離小於等於半徑的平方，則印出星號
        if distance &lt;= radius ** 2:
            print('*', end='')
        else:
            print(' ', end='')
    print() # 換行</pre>
<p><br/><br/><br/><br/>HW11<br/><br/></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">n = 11 # 總共的行數
space = '_'
center = n//2
#print(center)

for y in range(n):
    for x in range(n):
        print("(", x, ",", y, ")")</pre>
<p><br/><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/41323209/9670c4c811c99cb9b9b0ddd1b25d77d1/raw/d7e9132ed321b80ec32f7424c24aaea029824f0a/11.py">圖框</a></p>
<h3>W12</h3>
<p><a href="https://mdecp2024.github.io/hw-41323209/content/Brython.html?src=https://gist.githubusercontent.com/41323209/9670c4c811c99cb9b9b0ddd1b25d77d1/raw/38c47163ee9e7a036d215b16fb75c202bcfbf568/HW12.py">12.1-2</a></p>
<p><a href="https://mdecp2024.github.io/hw-41323209/content/Brython.html?src=https://gist.githubusercontent.com/41323209/9670c4c811c99cb9b9b0ddd1b25d77d1/raw/bf6b213866293831c4b2c9bb1d99a1c3aa767505/HW12%2520.3.py">12.3</a></p>
<p><a href="https://mdecp2024.github.io/hw-41323209/content/Brython.html?src=https://gist.githubusercontent.com/41323209/9670c4c811c99cb9b9b0ddd1b25d77d1/raw/4fbee294bd942ae9ccd7ad379f216f20c8fb226c/HW12%2520.4.py">12.4</a></p>
<p><a href="https://mdecp2024.github.io/hw-41323209/content/Brython.html?src=https://gist.githubusercontent.com/41323209/9670c4c811c99cb9b9b0ddd1b25d77d1/raw/d6c0afa726131abe8c9ff2f45937638bfe7d7a25/HW12%2520.5.py">12.5</a></p>
<p>12.6</p><h3>W13</h3>
<!-- 引入 Brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload = function() {
    brython({debug:1, pythonpath:['/static/', '../../downloads/py/']});
}
</script>
<!-- 設置容器 -->
<div id="brython div1">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 引入 Brython 程式庫 --&gt;
&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;// &lt;![CDATA[
window.onload = function() {
    brython({debug:1, pythonpath:['/static/', '../../downloads/py/']});
}
// ]]&gt;&lt;/script&gt;
&lt;!-- 設置容器 --&gt;
&lt;div id="brython div1"&gt;&lt;/div&gt;
&lt;!-- 利用 Brython 繪圖 --&gt;
&lt;script type="text/python"&gt;// &lt;![CDATA[
from browser import html
from browser import document as doc

# 利用 HTML 建立 canvas 並定義特性
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython div1"]
brython_div &lt;= canvas
ctx = canvas.getContext("2d")

# 畫兩個矩形 (紅色邊框)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.rect(200, 200, 200, 200)
ctx.stroke()

# 畫對角線 (藍色)
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.stroke()

# 畫兩個圓形 (黑色)
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14)
ctx.stroke()
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)
ctx.stroke()


# 儲存幾何參數
shapes = {
    "circle1": (200, 200, 141.4),
    "circle2": (300, 300, 141.4),
    "square1": (100, 100, 300, 300),
    "square2": (200, 200, 400, 400),
}

# 簡化的判定函式
def is_in_circle(x, y, cx, cy, r):
    return (x - cx) ** 2 + (y - cy) ** 2 &lt; r ** 2

def is_in_square(x, y, x1, y1, x2, y2):
    return x1 &lt;= x &lt;= x2 and y1 &lt;= y &lt;= y2

# 根據點判定區域並返回顏色
def get_region_color(x, y):
    c1 = is_in_circle(x, y, *shapes["circle1"])
    c2 = is_in_circle(x, y, *shapes["circle2"])
    s1 = is_in_square(x, y, *shapes["square1"])
    s2 = is_in_square(x, y, *shapes["square2"])

    # 不在任何圓內
    if not c1 and not c2:
        return None

    # 同時在兩圓內的區域分割，這裡會根據交集劃分 4 個區域
    if c1 and c2:
        # 依照相對於對角線的上下、左右位置分割區域，給予不同顏色
        if x &lt; 250 and y &lt; 250:
            return "#2894FF"  # 左上區域
        elif x &gt;= 250 and y &lt; 250:
            return "#66B3FF"  # 右上區域
        elif x &lt; 250 and y &gt;= 250:
            return "#00FFFF"  # 左下區域
        elif x &gt;= 250 and y &gt;= 250:
            return "#80FFFF"  # 右下區域

    # 第一個圓的判定
    if c1:
        if s1:
            return "#28004D" if y &lt; x else "#96FED1"
        if y &lt; shapes["square1"][1]:
            return "#00EC00"  
        if y &gt; shapes["square1"][3]:
            return "#53FF53"  
        if x &lt; shapes["square1"][0]:
            return "#02DF82"  
        if x &gt; shapes["square1"][2]:
            return "#1AFD9C"  

    # 第二個圓的判定
    if c2:
        if s2:
            return "#006030"  
        if y &lt; shapes["square2"][1]:
            return "#5B4B00"  
        if y &gt; shapes["square2"][3]:
            return "#A23400"  
        if x &lt; shapes["square2"][0]:
            return "#82D900"  
        if x &gt; shapes["square2"][2]:
            return "#6FB7B7"  

    return "#01B468"  # 默認顏色

# 繪製掃描點並著色
def scan_and_draw():
    step = 1  # 減小步長提升細膩程度
    for y in range(0, canvas.height, step):
        for x in range(0, canvas.width, step):
            color = get_region_color(x, y)
            if color:
                ctx.fillStyle = color
                ctx.fillRect(x, y, step, step)  # 使用細小矩形填充

# 開始掃描和著色
scan_and_draw()

# 畫兩個矩形 (紅色邊框)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.rect(200, 200, 200, 200)
ctx.stroke()

# 畫對角線 (藍色)
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.stroke()

# 畫兩個圓形 (黑色)
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14)
ctx.stroke()
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)
ctx.stroke()
// ]]&gt;&lt;/script&gt;</pre>
</div>
<!-- 利用 Brython 繪圖 -->
<script type="text/python">
from browser import html
from browser import document as doc

# 利用 HTML 建立 canvas 並定義特性
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython div1"]
brython_div <= canvas
ctx = canvas.getContext("2d")

# 畫兩個矩形 (紅色邊框)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.rect(200, 200, 200, 200)
ctx.stroke()

# 畫對角線 (藍色)
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.stroke()

# 畫兩個圓形 (黑色)
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14)
ctx.stroke()
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)
ctx.stroke()


# 儲存幾何參數
shapes = {
    "circle1": (200, 200, 141.4),
    "circle2": (300, 300, 141.4),
    "square1": (100, 100, 300, 300),
    "square2": (200, 200, 400, 400),
}

# 簡化的判定函式
def is_in_circle(x, y, cx, cy, r):
    return (x - cx) ** 2 + (y - cy) ** 2 < r ** 2

def is_in_square(x, y, x1, y1, x2, y2):
    return x1 <= x <= x2 and y1 <= y <= y2

# 根據點判定區域並返回顏色
def get_region_color(x, y):
    c1 = is_in_circle(x, y, *shapes["circle1"])
    c2 = is_in_circle(x, y, *shapes["circle2"])
    s1 = is_in_square(x, y, *shapes["square1"])
    s2 = is_in_square(x, y, *shapes["square2"])

    # 不在任何圓內
    if not c1 and not c2:
        return None

    # 同時在兩圓內的區域分割，這裡會根據交集劃分 4 個區域
    if c1 and c2:
        # 依照相對於對角線的上下、左右位置分割區域，給予不同顏色
        if x < 250 and y < 250:
            return "#2894FF"  # 左上區域
        elif x >= 250 and y < 250:
            return "#66B3FF"  # 右上區域
        elif x < 250 and y >= 250:
            return "#00FFFF"  # 左下區域
        elif x >= 250 and y >= 250:
            return "#80FFFF"  # 右下區域

    # 第一個圓的判定
    if c1:
        if s1:
            return "#28004D" if y < x else "#96FED1"
        if y < shapes["square1"][1]:
            return "#00EC00"  
        if y > shapes["square1"][3]:
            return "#53FF53"  
        if x < shapes["square1"][0]:
            return "#02DF82"  
        if x > shapes["square1"][2]:
            return "#1AFD9C"  

    # 第二個圓的判定
    if c2:
        if s2:
            return "#006030"  
        if y < shapes["square2"][1]:
            return "#5B4B00"  
        if y > shapes["square2"][3]:
            return "#A23400"  
        if x < shapes["square2"][0]:
            return "#82D900"  
        if x > shapes["square2"][2]:
            return "#6FB7B7"  

    return "#01B468"  # 默認顏色

# 繪製掃描點並著色
def scan_and_draw():
    step = 1  # 減小步長提升細膩程度
    for y in range(0, canvas.height, step):
        for x in range(0, canvas.width, step):
            color = get_region_color(x, y)
            if color:
                ctx.fillStyle = color
                ctx.fillRect(x, y, step, step)  # 使用細小矩形填充

# 開始掃描和著色
scan_and_draw()

# 畫兩個矩形 (紅色邊框)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.rect(200, 200, 200, 200)
ctx.stroke()

# 畫對角線 (藍色)
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.stroke()

# 畫兩個圓形 (黑色)
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14)
ctx.stroke()
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)
ctx.stroke()
</script><h3>W14</h3>
<!-- 引入 Brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload = function() {
    brython({debug:1, pythonpath:['/static/', '../../downloads/py/']});
}
</script>
<!-- 設置容器 -->
<div id="brython_div1">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random
 
# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    # 創建 canvas 並設置寬度與高度
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]
    brython_div &lt;= canvas
     
    # 獲取 canvas 的 2D 上下文
    ctx = canvas.getContext("2d")
     
    return canvas, ctx
 
# 定義一個隨機顏色生成函式
def random_color_generator():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"
 
# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2
 
# 使用者設定的圓心座標和半徑，並進行掃描線填充
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    # 初始化畫布
    canvas, ctx = initialize_canvas(400, 400)
     
    # 清除畫布
    ctx.clearRect(0, 0, canvas.width, canvas.height)
     
    # 顏色區域存儲
    color_dict = {}
 
    # 使用掃描線方法填充區域
    for py in range(0, canvas.height):
        # 逐行掃描，判斷每個點是否在圓內
        current_color = None  # 當前掃描線區域的顏色
        for px in range(0, canvas.width):
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)
             
            if in_circle1 and in_circle2 and in_circle3:
                # 交集區域
                if "intersection" not in color_dict:
                    color_dict["intersection"] = random_color_generator()
                current_color = color_dict["intersection"]
            elif in_circle1 and in_circle2:
                # 只在圓1與圓2的交集區域
                if "circle1_circle2" not in color_dict:
                    color_dict["circle1_circle2"] = random_color_generator()
                current_color = color_dict["circle1_circle2"]
            elif in_circle2 and in_circle3:
                # 只在圓2與圓3的交集區域
                if "circle2_circle3" not in color_dict:
                    color_dict["circle2_circle3"] = random_color_generator()
                current_color = color_dict["circle2_circle3"]
            elif in_circle1 and in_circle3:
                # 只在圓1與圓3的交集區域
                if "circle1_circle3" not in color_dict:
                    color_dict["circle1_circle3"] = random_color_generator()
                current_color = color_dict["circle1_circle3"]
            elif in_circle1:
                # 只在圓1內
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                # 只在圓2內
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                # 只在圓3內
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                # 點不在圓內，畫外區域
                current_color = "white"  # 背景色白色
 
            # 填充顏色
            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素
 
# 三個圓心和半徑的設定
# 假設三個圓心分佈成等邊三角形的頂點，並設置它們的半徑
radius = 100  # 圓的半徑
x1, y1 = 150, 200  # 圓1 圓心
x2, y2 = 250, 200  # 圓2 圓心
x3, y3 = 200, 100  # 圓3 圓心
 
# 呼叫畫圓函式
draw_circles(x1, y1, radius, x2, y2, radius, x3, y3, radius)</pre>
</div>
<!-- 利用 Brython 繪圖 -->
<script type="text/python">
from browser import html
from browser import document as doc

# 利用 HTML 建立 canvas 並定義特性
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython_div1"]  # 注意這裡的 id 應該是 "brython_div1"
brython_div <= canvas
ctx = canvas.getContext("2d")

# 在畫布上畫一個簡單的圓形
ctx.beginPath()
ctx.arc(300, 300, 100, 0, 2 * 3.14159)  # 圓心(300, 300)，半徑100
ctx.fillStyle = "red"
ctx.fill()

# 進行簡單的文字繪製
ctx.font = "30px Arial"
ctx.fillStyle = "blue"
ctx.fillText("Hello Brython!", 200, 200)
</script>
<h3>w15</h3>
<p>題目一:<a href="https://mdecp2024.github.io/hw-41323209/content/Brython.html?src=https://gist.githubusercontent.com/41323209/9670c4c811c99cb9b9b0ddd1b25d77d1/raw/bf35cb342b90079f49db03ff2018d6d3d5c4d183/w15%25201.py">1累加到100</a></p>
<p>題目二:<a href="https://mdecp2024.github.io/hw-41323209/content/Brython.html?src=https://gist.githubusercontent.com/41323209/9670c4c811c99cb9b9b0ddd1b25d77d1/raw/4aa27d9252ef6a337d3cd90c05cfd81a8bad4672/w15%25202.py">兩數之間總和</a></p>
<h3>w10</h3>
<p>題目一:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/8IAeN5T1byQ" width="560"></iframe></p>
<p></p>
<p></p>
<p>題目二:</p>
<p><a href="https://youtu.be/UQ5PDuwfSoM">https://youtu.be/UQ5PDuwfSoM<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/UQ5PDuwfSoM" width="560"></iframe></a></p>
<p></p>
<p>題目三:</p>
<p>影片上限無法傳</p>
<p><br/><br/></p>
<p></p>
<p><br/><br/></p>
<p><br/><br/></p>
<p></p>
<p></p>
<h3>W5</h3>
<div>
<div class="syntaxhighlighter py" id="highlighter_643107">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#help(range)
for i in range(1,5):
    print(i)
def print_pyramid(height):
    for i in range(height):
        # 打印空格
        print(' ' * (height - i - 1), end='')
        # 打印星号
        print('*' * (2 * i + 1))
 
# 设置金字塔的高度
pyramid_height = 5
print_pyramid(pyramid_height)

1
2
3
4
5
6
7
8
9
1
2
3
4
    *
   ***
  *****
 *******
*********
</pre>
<h2>w6</h2>
<ol>
<li>下載 python_2025_lite.7z（可攜程式環境）</li>
<li>下載 zmq_remote_api ex cube_triangle.7z（税用 Python 控制模擬場景中的物件）</li>
<li>進入可攜程式環境中 data/CoppeliaSim 目錄，開啟 coppeliasim.exe（機電整合模擬程式，原始碼）</li>
<li>啟動可攜程式環境，雙點擊 start_ipv6.bat，系統會啟動四個命令列，兩個 SciTE 編輯器</li>
<li>執行場景控制程式前，先處理操作系統的防火牆，將下列指令存為，<wbr/>bat 檔案後，以管理員身袋執行，以便開啟 23000-23050 號進出：</li>
<li>netsh advfirewall firewall add rule name="allow _23000-23050™ dir=in action=allow protocol=TCP localport=23000-23050 netsh advfirewall firewall add rule name="allow_23000-23050" dir=out action=allow protocol=TCP localport=23000-23050 </li>
<li>開啟 CoppeliaSim 中的視覺串流伺服器：Modules - Connectivity - Visualization stream </li>
<li>利用 SCITE 開啟 put_cubes_into_scene__1.py， 利用 Tools -Go 執行操控程式</li>
<li>使用者可以透過瀏覽器,以模擬場景所在電腦的IP,<wbr/>且埠號為23020 觀看模擬場</li>
</ol>
</div>
</div>
<div>
<div class="line number1 index0 alt2">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from coppeliasim_zmqremoteapi_client import RemoteAPIClient
import time
import keyboard
 
# 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線
client = RemoteAPIClient('172.20.10.2', 23000)
# 以 getObject 方法取得場景物件
sim = client.getObject('sim')
box = sim.getObject('/box')
 
# 啟動模擬
sim.startSimulation()
 
# 設定立方體的尺寸和初始位置
cube_size = 0.2  # 20 cm
spacing = 0.5  # 50 cm 之間的距離（可根據需求調整）
 
# 擺放立方體的行數和每行的數量
rows = 5  # 從第 1 行到第 5 行
cubes_in_row = [1, 3, 5, 7, 9]  # 每行立方體的數量
 
# 在正的 Y 方向擺放立方體
for row in range(rows):
    # 計算每行的起始 x 位置，讓其對稱
    start_row_x = - (cubes_in_row[row] - 1) * spacing / 2
     
    for col in range(cubes_in_row[row]):
        # 計算每個立方體的位置
        x_position = start_row_x + col * spacing
        y_position = row * spacing  # 垂直方向上每行間距
         
        # 建立立方體
        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size, cube_size, cube_size], 0)
        sim.setObjectPosition(cube_handle, -1, [x_position, y_position, cube_size / 2])  # z 方向上升到立方體的中心
 
# 在負的 Y 方向擺放立方體
for row in range(rows):
    # 計算每行的起始 x 位置，讓其對稱
    start_row_x = - (cubes_in_row[row] - 1) * spacing / 2
     
    for col in range(cubes_in_row[row]):
        # 計算每個立方體的位置
        x_position = start_row_x + col * spacing
        y_position = -row * spacing  # 負的 Y 方向
         
        # 建立立方體
        cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size, cube_size, cube_size], 0)
        sim.setObjectPosition(cube_handle, -1, [x_position, y_position, cube_size / 2])  # z 方向上升到立方體的中心
 
# 完成立方體的擺放
print("立方體已成功擺放!")
 
# 設定主迴圈
while True:
    # 在這裡可以進行其他模擬操作
    time.sleep(0.1)  # 確保循環不會過快
 
    if keyboard.is_pressed('q'):
        # 可以按下 q 鍵跳出重複執行迴圈
        break
 
# 終止模擬
sim.stopSimulation()</pre>
</div>
</div>
<h3>w7</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/9FqH1bt2dr0" width="560"></iframe></p>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h2>16Exam</h2>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, html
import math
  
# 初始化 HTML，確保 canvas 元素存在
def setup_canvas():
    if not document.querySelector("#my_canvas"):
        canvas = html.CANVAS(id="my_canvas", width=800, height=600)
        document &lt;= canvas
  
setup_canvas()
 
# Set up canvas
canvas = document["my_canvas"]
ctx = canvas.getContext("2d")
 
# Set origin (32, 17)
origin_x, origin_y = 32, 17    #自己學號 修改
 
# Draw X-axis
ctx.beginPath()
ctx.moveTo(origin_x, origin_y)
ctx.lineTo(500, origin_y)
ctx.strokeStyle = "black"
ctx.lineWidth = 2
ctx.stroke()
 
# Draw Y-axis
ctx.beginPath()
ctx.moveTo(origin_x, origin_y)
ctx.lineTo(origin_x, 300)
ctx.stroke()
 
# Label origin
ctx.font = "12px Arial"
ctx.fillStyle = "black"
ctx.fillText("(32, 09)", origin_x + 5, origin_y - 5)
 
# Draw shapes
# Adjusted placement to fix alignment issue
 
# Hexagon (Orange)
hex_x, hex_y = 100, 100
ctx.beginPath()
for i in range(6):
    angle = i * (2 * math.pi / 6)
    x = hex_x + 30 * math.cos(angle)
    y = hex_y + 30 * math.sin(angle)
    if i == 0:
        ctx.moveTo(x, y)
    else:
        ctx.lineTo(x, y)
ctx.closePath()
ctx.fillStyle = "orange"
ctx.fill()
 
# Diamond (Teal)
ctx.beginPath()
ctx.moveTo(160, 70)
ctx.lineTo(180, 100)
ctx.lineTo(160, 130)
ctx.lineTo(140, 100)
ctx.closePath()
ctx.fillStyle = "teal"
ctx.fill()
 
# Triangle (Teal)
ctx.beginPath()
ctx.moveTo(165, 130)
ctx.lineTo(205, 130)
ctx.lineTo(185, 100)
ctx.closePath()
ctx.fillStyle = "blue"
ctx.fill()
 
# Circle (Pink)
ctx.beginPath()
ctx.arc(230, 100, 30, 0, 2 * math.pi)
ctx.fillStyle = "pink"
ctx.fill()
 
# Square (Yellow)
ctx.beginPath()
ctx.rect(265, 75, 50, 50)
ctx.fillStyle = "yellow"
ctx.fill()
 
# Rectangle (Blue)
ctx.beginPath()
ctx.rect(320, 90, 60, 20)
ctx.fillStyle = "Blue"
ctx.fill()</pre>
<p></p>
<p><a href="https://mdecp2024.github.io/hw-41323209/content/Brython.html?src=https://gist.githubusercontent.com/41323209/9670c4c811c99cb9b9b0ddd1b25d77d1/raw/0ab780475676e8e8a714018f75743241f71dd673/HW16%2520.py">16</a></p><h3>HW 16.1Exam</h3>
<p><a href="https://mdecp2024.github.io/hw-41323209/content/Brython.html?src=https://gist.githubusercontent.com/41323209/9670c4c811c99cb9b9b0ddd1b25d77d1/raw/d9e768b15af69fd15d4febd59f929e631bd3dc75/HW16.1%2520.py">Exam16.1</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 取得 canvas 的繪圖上下文
ctx = canvas.getContext("2d")

# 設置線條樣式
ctx.strokeStyle = "#00bfff";
ctx.lineWidth = 8;

# 定義原點偏移量
origin_x = 31
origin_y = 7

# 標示原點座標
ctx.font = "12px Arial"
ctx.fillStyle = "black"
ctx.fillText("(32, 09)", 35, 50)

# 繪製迷宮圖案
ctx.beginPath();

# 外框左上
ctx.moveTo(50 + origin_x, 50 + origin_y);
ctx.lineTo(250 + origin_x, 50 + origin_y);
ctx.closePath();
ctx.stroke();

# 外框右上
ctx.beginPath();
ctx.moveTo(350 + origin_x, 50 + origin_y);
ctx.lineTo(550 + origin_x, 50 + origin_y);
ctx.closePath();
ctx.stroke();

# 外框左
ctx.beginPath();
ctx.moveTo(50 + origin_x, 50 + origin_y);
ctx.lineTo(50 + origin_x, 550 + origin_y);
ctx.closePath();
ctx.stroke();

# 外框右
ctx.beginPath();
ctx.moveTo(550 + origin_x, 50 + origin_y);
ctx.lineTo(550 + origin_x, 550 + origin_y);
ctx.closePath();
ctx.stroke();

# 外框左下
ctx.moveTo(50 + origin_x, 550 + origin_y);
ctx.lineTo(250 + origin_x, 550 + origin_y);
ctx.closePath();
ctx.stroke();

# 外框右下
ctx.beginPath();
ctx.moveTo(350 + origin_x, 550 + origin_y);
ctx.lineTo(550 + origin_x, 550 + origin_y);
ctx.closePath();
ctx.stroke();

# 內部橫1
ctx.beginPath();
ctx.moveTo(150 + origin_x, 150 + origin_y);
ctx.lineTo(450 + origin_x, 150 + origin_y);
ctx.closePath();
ctx.stroke();

# 內部橫2
ctx.beginPath();
ctx.moveTo(50 + origin_x, 250 + origin_y);
ctx.lineTo(250 + origin_x, 250 + origin_y);
ctx.closePath();
ctx.stroke();

# 內部橫3
ctx.beginPath();
ctx.moveTo(150 + origin_x, 350 + origin_y);
ctx.lineTo(450 + origin_x, 350 + origin_y);
ctx.closePath();
ctx.stroke();

# 內部橫4
ctx.beginPath();
ctx.moveTo(250 + origin_x, 450 + origin_y);
ctx.lineTo(350 + origin_x, 450 + origin_y);
ctx.closePath();
ctx.stroke();

# 內部直1
ctx.beginPath();
ctx.moveTo(250 + origin_x, 150 + origin_y);
ctx.lineTo(250 + origin_x, 253.5 + origin_y);
ctx.closePath();
ctx.stroke();

# 內部直2
ctx.beginPath();
ctx.moveTo(450 + origin_x, 150 - 3.5 + origin_y);
ctx.lineTo(450 + origin_x, 250 + origin_y);
ctx.closePath();
ctx.stroke();

# 內部直3
ctx.beginPath();
ctx.moveTo(350 + origin_x, 250 + origin_y);
ctx.lineTo(350 + origin_x, 350 + origin_y);
ctx.closePath();
ctx.stroke();

# 內部直4
ctx.beginPath();
ctx.moveTo(150 + origin_x, 350 + origin_y);
ctx.lineTo(150 + origin_x, 350 + 100 + origin_y);
ctx.closePath();
ctx.stroke();

# 內部直5
ctx.beginPath();
ctx.moveTo(450 + origin_x, 350 + origin_y);
ctx.lineTo(450 + origin_x, 350 + 200 + origin_y);
ctx.closePath();
ctx.stroke();

# 內部直6
ctx.beginPath();
ctx.moveTo(250 + origin_x, 450 + origin_y);
ctx.lineTo(250 + origin_x, 450 + 100 + origin_y);
ctx.closePath();
ctx.stroke();

# 設置線條樣式
ctx.strokeStyle = "	#6F00D2";
ctx.lineWidth = 8;

# 紀錄完成訊息
console.log("迷宮繪製完成");</pre>
<p></p><h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h2>16.1Exam</h2><h3>HW 16.2 Exam</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/bXel8PUfje8" width="560"></iframe></p><h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>